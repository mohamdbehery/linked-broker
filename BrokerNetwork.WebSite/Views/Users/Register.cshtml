@model BrokerNetwork.WebSite.Models.RegisterModel

@{
    ViewBag.Title = "حساب جديد";
}

<script>
    // This is called with the results from from FB.getLoginStatus().
    function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
            // Logged into your app and Facebook.
            testAPI(response);
        } else {
            // The person is not logged into your app or we are unable to tell.
            document.getElementById('status').innerHTML = 'Please log ' +
                'into this app.';
        }
    }

    // This function is called when someone finishes with the Login
    // Button.  See the onlogin handler attached to it in the sample
    // code below.
    function checkLoginState() {
        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });
    }

    window.fbAsyncInit = function () {
        FB.init({
            appId: '381754109100836',
            cookie: true,  // enable cookies to allow the server to access
            // the session
            xfbml: true,  // parse social plugins on this page
            version: 'v3.3' // The Graph API version to use for the call
        });

        // Now that we've initialized the JavaScript SDK, we call
        // FB.getLoginStatus().  This function gets the state of the
        // person visiting this page and can return one of three states to
        // the callback you provide.  They can be:
        //
        // 1. Logged into your app ('connected')
        // 2. Logged into Facebook, but not your app ('not_authorized')
        // 3. Not logged into Facebook and can't tell if they are logged into
        //    your app or not.
        //
        // These three cases are handled in the callback function.

        //FB.getLoginStatus(function(response) {
        //  statusChangeCallback(response);
        //});

    };

    // Load the SDK asynchronously
    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "https://connect.facebook.net/ar_AR/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));

    // Here we run a very simple test of the Graph API after login is
    // successful.  See statusChangeCallback() for when this call is made.
    function testAPI(res) {
        console.log('Welcome!  Fetching your information.... ');

        FB.api('/me', function (response) {
            console.log(response);
            console.log('Successful login for: ' + response.name);
            $('#Provider').val("FaceBook");
            $('#ProviderID').val(response.id);
            $('#UserPassword').hide();
            $('#ConfirmPassword').hide();
            $('#UserPassword').val('123456');
            $('#ConfirmPassword').val('123456');
            $('#Email').val(response.email);
            $('#divPass').hide();
            $('#FullName').val(response.name);
            //document.getElementById('status').innerHTML =
            //  'Thanks for logging in, ' + response.name + '!';
        });
    }

    /**/</script>

@using (Html.BeginForm("Register", "Users", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Provider)
    @Html.HiddenFor(x => x.ProviderID)

    <div class="card">
        <div class="card-header">
            <h1 class="card-title">@ViewBag.Title</h1>
        </div>
        <div class="card-block">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            الاسم كاملا
                        </label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <br />
                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            البريد الالكترونى
                        </label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" id="divPass">
                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            كلمة المرور
                        </label>
                        <div class="form-group">
                            @Html.PasswordFor(model => model.UserPassword, new { @class = "form-control" })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.UserPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            تأكيد كلمة المرور
                        </label>
                        <div class="form-group">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                @*<div class="col-sm-6">

                    <div class="input-group ">
                        <label class="inline-label for-ddl">
                            المواقع المفضلة للعمل
                        </label>
                        <div class="form-group">
                            @Html.DropDownList("LocationID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FavouriteLocationIDs, "", new { @class = "text-danger" })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.FavouriteLocationIDs, "", new { @class = "text-danger" })
                        </div>
                    </div>
                        </div>*@


                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            الموبايل
                        </label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group ">
                        <label class="inline-label">
                            الصورة الشخصية
                        </label>

                        <div class="form-group">
                            <label class="custom-file-upload">
                                <input type="file" name="fuPersonalImage" id="fuPersonalImage"/>
                                <i class="zmdi zmdi-plus zmdi-hc-fw"></i>
                                اختر
                                @Html.ValidationMessageFor(model => model.ProfileImgPath, "", new { @class = "text-danger" })
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    كلمة عن نفسك

                    <div class="input-group">
                        <div class="form-group">
                            @Html.TextAreaFor(model => model.Notes, new { @class = "form-control text-area", @type = "password" })
                            <i class="form-group__bar"></i>
                            @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <img id="userImage" src="#" alt="your image" style="width:80%"/>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 text-center">
                    <input type="submit" value="انشاء حساب جديد" class="btn custom-btn2" /> &nbsp;&nbsp;أو 
                    <button type="button" class="loginBtn custom-btn2 facebook-button" id="testLogin">
                        <span>سجل بفيسبوك</span>
                    </button> &nbsp;&nbsp;
                    <a href="/Login">تسجيل الدخول</a>
                </div>
            </div>
            @{
                var msg = ViewBag.Msg;
            }
            @if (!string.IsNullOrEmpty(msg))
            {
                <div class="row">
                    <div class="col-lg-12">
                        <div class="alert alert-danger">
                            @msg
                        </div>
                    </div>
                </div>
            }
            @*<fb:login-button scope="public_profile,email" onlogin="checkLoginState();">
                </fb:login-button>*@
        </div>
    </div>
    
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $(document).ready(function () {
        //$('#testLogin').click(function (e) {
        //    debugger;
        //    e.preventDefault();
        //    FB.login(statusChangeCallback, { scope: 'email,public_profile', return_scopes: true });
        //});
        document.getElementById('testLogin').addEventListener('click', function () {
            //do the login
            FB.login(statusChangeCallback, { scope: 'email,public_profile', return_scopes: true });
        }, false);
        $('#userImage').hide();
        $("#fuPersonalImage").change(function () {
            readURL(this);
        });
    });
    function readURL(input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#userImage').attr('src', e.target.result);
                $('#userImage').show();
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

</script>
}
